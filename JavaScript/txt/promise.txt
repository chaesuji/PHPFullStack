비동기 처리 : 특정 코드의 연산이 끝날 때까지 코드의 실행을 멈추지 않고 다음 코드를 먼저 실행하는 것 ( ajax 통신, setTimeout() ... 
동기 처리 : 한 작업이 실행되는 동안 다른 작업은 멈춘 상태를 유지하고 다음 실행의 차례를 기다리는 것

비동기 처리 방식의 문제점 해결 -> 콜백 함수 사용
* 콜백 함수 : 다른 함수의 인자로써 넘겨진 후 특정 이벤트에 의해 호출되는 함수

* 콜백 함수 예시
function myCallBack(i) { // myCallBack(i) === myCallback(2)
    return i + 1; // i + 1 === 2 + 1 > 3
}

function printNum(fn) { // fn에 myCallBack 함수 
    console.log(fn(2)); // fn(2) === myCallBack(2)
}

printNum(myCallBack); // myCallBack 함수를 printNum의 인자로 씀
-> myCallBack 함수에 ()를 붙이면 함수를 실행한 값이 printNum으로 들어가게 됨 === myCallBack을 printNum보다 먼저 실행
=> return 3

비동기 처리에서의 콜백 지옥 => 코드 가독성이 좋지 않아서 잘 쓰지 않음
setTimeout(() => {
    console.log('A'); // 3초 후에 'A'
    setTimeout(() => {
        console.log('B'); // 3초 + 2초 후에 'B'
        setTimeout(() => {
            console.log('C'); // 3 + 2 + 1초 후에 'C'
        }, 1000);
    }, 2000);
}, 3000);
=> A B C

* jse(자바스크립트 엔진) -> 스택구조
* settimeout() -> 브라우저(지정한 시간 만큼 지난 후에 엔진으로 넘김) -> jse(코드 실행)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Promise : 
const promise1 = new Promise((resolve, reject) => {
    // resolve, reject -> promise 객체에서 자동 생성
    const data = true;
    if(data){
        resolve('성공'); // 에러 없이 성공했을 때
    }else{
        reject('error'); // 예외, 에러 시
    }
});
// promise chaining
// 프로미스에서 실행한 값을 받아옴, 연쇄적으로 코드가 실행될 때 바로 전 값을 받아오는 것
promise1
.then(data => {console.log(data);}) // 성공적으로 수행했을 때 실행되는 코드
.catch(error => {console.log(error);}) // 실패했을 때 실행되는 코드
.finally(() => {console.log('finally')}) // 성공하든 실패하든 무조건 실행되는 코드

// resolve() : 비동기 처리가 수행된 상태(성공)에서 ()안에 있는 코드 실행
// reject() : 비동기 처리가 수행된 상태(실패)에서 ()안에 있는 코드 실행
// .then : 비동기 처리가 성공한 상태에서 처리 결과를 인수로 전달 받음, 프로미스 반환

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
async / await 
async 함수 : 반환 값으로 (resolve)promise를 반환
await : async으로 선언된 함수 내에서만 사용가능, 코드가 실행된 값을 가지고 돌아올 때까지 다음 코드의 실행을 막아주는 역할

// async로 비동기 처리
async function delay1(){ // 4
    const delayTime = Date.now() +2000;
    while(Date.now() < delayTime) {}
    return 'B';
}
console.log('A'); // 1
delay1() // 2 
.then(b => console.log(b)); // 5
console.log('C') // 6
>>> A (B C)

function ddelay(ms){
    return new Promise(resolve => setTimeout(resolve, ms)) // 시간을 딜레이 시키는 용도의 함수
}
async function getA() { 
    await ddelay(2000); 
    return 'A'; // Promise 객체로 리턴 >>> resolve('A')
}
async function getB() {
    await ddelay(5000);
    return 'B'; // > resolve('B')
}

// promise 방식으로 출력
// getA()
// .then(a => {
//     return getB()
//     .then(b => console.log(`${a} : ${b}`))
// });

// async 방식으로 출력
async function getAll(){
    const strA = await getA(); // strA = resolve('A')
    const strB = await getB(); // strB = resolve('B')

    console.log(`${strA} : ${strB}`);
}
getAll();
//.catch() >>> async에서 reject를 사용하지 않아도 에러 발생시 바로 catch로 이동됨

병렬 처리 방식
async function getAllll(){
    Promise.all([getA(), getB()])
    .then(all => console.log(all.join(' : ')));
}
getAllll();

all() : promise 객체를 배열 형태로 저장됨
-> all()으로 값이 넘어올 때 >>> resolve('A'), resolve('B')
join() : all() 메서드를 통해 배열 형태로 저장된 값을 ()안의 값으로 이어줌

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Ajax

fetch() 
* fetch로는 데이터를 바로 사용할 수 없음
json() : Response를 가져와서 완료될 때까지 읽음
json() : Response 스트림을 가져와 스트림이 완료될 때까지 읽음