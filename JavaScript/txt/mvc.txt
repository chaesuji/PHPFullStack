https://pronist.dev/43#%EC%BB%A8%ED%8A%B8%EB%A1%A4%EB%9F%AC-1
https://freehoon.tistory.com/68
https://jins-coding-blog.tistory.com/70 - 라라벨씀
https://freehoon.tistory.com/category/%EA%B0%9C%EB%B0%9C/PHP - mvc 게시판

https://link2me.tistory.com/1401 - 객체지향의 잘못된 예

https://www.youtube.com/watch?v=ogaXW6KPc8I - mvc 패턴 설명

https://www.youtube.com/watch?v=K3ItNH0ZdKo - class 설명

MVC(Model-View-Controller) 패턴 : 유지보수를 편하게 하기위한 코드 방식
M(Model) : 데이터와 관련된 부분(DB), 데이터의 생성, 접근, 수정, 삭제
* Controller와 View에 의존하지 않아야 함
* 모델 내부에 컨트롤러와 뷰와 관련된 내용의 코드가 있으면 안됨
=> 데이터의 값과 상태 및 각종 기능을 처리하는 부분과 사용되는 데이터 부분으로 구성

V(View) : 화면 부분(HTML,CSS)
* 모델에만 의존해야 하며 컨트롤러에는 의존하면 안됨 
* 뷰가 모델로부터 데이터를 받을 때는 사용자마다 다르게 보여주어야 하는 데이터에 대해서만 받아야 함
* 뷰 내부에 모델과 관련된 코드가 있어도 상관 없음
=> 사용자에게 응답처리 결과를 보여주며 필요에 따라 모델의 데이터 내용을 참조하고 사용자에게 화면을 보여줌

C(Controller) : 모델과 뷰를 연결시키는 부분 
* 컨트롤러는 모델과 뷰에 의존해도 됨
* 뷰가 모델로부터 데이터를 받을 때 컨트롤러를 통해 데이터를 받아야 함 
    => 컨트롤러를 통해서 모델의 정보를 넘겨주는 방식으로 데이터 받기
=> 사용자가 조작하면 모델이나 뷰에 필요한 지시를 보내는 역할
: (사용자의 요청을 처리하고 응답을 되돌려주는 전체 과정 담당)

MVC가 적용된 웹 사이트의 흐름
1. 사용자가 브라우저를 통해 요청을 전송하면 컨트롤러가 받음
2. 컨트롤러가 모델에게 데이터 처리 요청, 모델은 처리된 데이터를 컨트롤러에 반환
3. 컨트롤러는 모델로부터 되돌려받은 데이터를 뷰에 전달
4. 뷰는 응답을 생성하여 컨트롤러에 반환
5. 컨트롤러가 브라우저에 뷰로부터 되돌려받은 응답을 전송